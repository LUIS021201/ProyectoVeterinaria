Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from random import *\r\n\r\nfrom flask import Flask, redirect, render_template, request, session\r\n\r\nfrom funciones import mandar_correo_codigo\r\nfrom usuarios import get_dicc_usuarios, get_dicc_accesos, grabar_dicc_usuarios\r\nfrom passlib.hash import sha256_crypt\r\n\r\napp = Flask(__name__)\r\napp.secret_key = 'lwiu74dhn2SuF3j'\r\ndiccionario_usuarios = get_dicc_usuarios()\r\n\r\ndiccionario_accesos = get_dicc_accesos()\r\nmensaje = 'MENSAJE DE PRUEBA'\r\nmensaje2 = 'SEGUNDO MENSAJE DE PRUEBA'\r\n\r\n\r\n\r\n@app.context_processor\r\ndef handle_context():\r\n    if 'logged_in' in session.keys():\r\n        if session['logged_in']:\r\n            accesos = diccionario_accesos[session['type']]\r\n            usuario = diccionario_usuarios[session['email']]\r\n\r\n            # return render_template(\"index.html\", accesos=accesos, log=['Log Out', '/logout'], usuario=usuario)\r\n            return {'accesos': accesos, 'log': ['Log Out', '/logout'], 'usuario': usuario}\r\n        else:\r\n            return {'log': ['Log In', '/login']}\r\n    else:\r\n        return {'log': ['Log In', '/login']}\r\n\r\n\r\n@app.route(\"/\")\r\ndef index():\r\n    '''El contenido de index depende de las variables enviadas en el metodo de handle context'''\r\n    return render_template(\"index.html\")\r\n\r\n\r\n@app.route(\"/login\", methods=['GET', 'POST'])\r\ndef login():\r\n    if request.method == 'GET':\r\n        return render_template(\"login.html\")\r\n    elif request.method == 'POST':\r\n        username = request.form['email']\r\n        password = request.form['password']\r\n        if username in diccionario_usuarios:\r\n            if sha256_crypt.verify(password, diccionario_usuarios[username]['password']):\r\n                session['email'] = username\r\n                session['nombre'] = diccionario_usuarios[username]['nombre']\r\n                session['logged_in'] = True\r\n                session['type'] = diccionario_usuarios[username]['type']\r\n                return redirect(\"/\")\r\n            else:\r\n                mensaje = 'Usuario o contraseña incorrectos'\r\n                return render_template(\"login.html\", mensaje=mensaje)\r\n        else:\r\n            mensaje = 'Usuario o contraseña incorrectos'\r\n            return render_template(\"login.html\", mensaje=mensaje)\r\n\r\n\r\n@app.route(\"/logout\", methods=['GET'])\r\ndef logout():\r\n    session.clear()\r\n    return redirect(\"/\")\r\n\r\n\r\n@app.route(\"/forgot_password\", methods=['GET', 'POST'])\r\ndef forgot_password():\r\n    if request.method == 'GET':\r\n        return render_template(\"forgot_password.html\")\r\n    elif request.method == 'POST':\r\n        username = request.form['email']\r\n        if username in diccionario_usuarios and username != 'PetVetReal@gmail.com':\r\n            password = diccionario_usuarios[username]['password']\r\n            mensaje = f'Se envió un código para cambiar la contraseña a su correo ({username})'\r\n            digitos = [n for n in range(0, 10)]\r\n            codigo = ''\r\n            for i in range(4):\r\n                numero = randint(0, 9)\r\n                codigo += str(numero)\r\n            print(codigo)\r\n            session['usuario_codigo']=username\r\n            session['codigo']=codigo\r\n            # MANDAR CODIGO POR CORREO DE LA PERSONA\r\n            mandar_correo_codigo('PetVetReal@gmail.com',username,diccionario_usuarios['PetVetReal@gmail.com']['password'],codigo)\r\n            return redirect('/reset_code')\r\n        else:\r\n            mensaje = 'nombre de usuario desconocido'\r\n            return render_template(\"forgot_password.html\", mensaje=mensaje)\r\n\r\n\r\n@app.route(\"/reset_code\", methods=['GET', 'POST'])\r\ndef reset_code():\r\n    if request.method == 'GET':\r\n        return render_template('reset_code.html')\r\n    elif request.method == 'POST':\r\n        codigo_usuario=request.form['codigo']\r\n        username=session['usuario_codigo']\r\n        codigo= session['codigo']\r\n        print(codigo_usuario,\"asdf \",codigo, \" \", username)\r\n        if codigo_usuario == codigo:\r\n            return redirect('/new_password')\r\n        else:\r\n            mensaje = 'Codigo Incorrecto, pruebe de nuevo'\r\n            return render_template('reset_code.html', mensaje=mensaje)\r\n\r\n@app.route(\"/new_password\", methods=['GET', 'POST'])\r\ndef new_password():\r\n    if request.method == 'GET':\r\n        return render_template(\"new_password.html\")\r\n    elif request.method == 'POST':\r\n        password1 = request.form['password1']\r\n        password2 = request.form['password2']\r\n        if password1 == password2:\r\n            #cambiar contraseña\r\n            nueva_contraseña=sha256_crypt.hash(password1)\r\n            diccionario_usuarios[session['usuario_codigo']]['password']= nueva_contraseña\r\n            print(nueva_contraseña)\r\n            grabar_dicc_usuarios(diccionario_usuarios)\r\n            return redirect('/password_changed')\r\n        else:\r\n            mensaje = 'Contraseñas no concuerdan, intente de nuevo'\r\n            return render_template(\"new_password.html\", mensaje=mensaje)\r\n@app.route(\"/password_changed\", methods=['GET', 'POST'])\r\n\r\ndef password_changed():\r\n    if request.method == 'GET':\r\n        return render_template(\"password_changed.html\")\r\n    elif request.method == 'HEAD':\r\n        redirect(\"/login\")\r\n\r\n\r\n@app.route(\"/usuarios\", methods=['GET', 'POST'])\r\ndef usuarios():\r\n    if 'logged_in' in session.keys():\r\n        if session['logged_in']:\r\n            lista_usuarios = get_dicc_usuarios()\r\n            return render_template(\"lista_usuarios.html\", lista_usuarios=lista_usuarios)\r\n        else:\r\n            return redirect(\"/\")\r\n    else:\r\n        return redirect(\"/\")\r\n\r\n@app.route(\"/agregar_usuario\", methods=['GET', 'POST'])\r\ndef agregar_usuario():\r\n    if 'logged_in' in session.keys():\r\n        if session['logged_in']:\r\n            if session['type'] == 'admin':\r\n                if request.method == 'GET':\r\n                    return render_template(\"agregar_usuario.html\")\r\n                elif request.method == 'POST':\r\n                    email = request.form['email']\r\n                    password = request.form['password']\r\n                    nombre = request.form['nombre']\r\n                    type = request.form['tipo']\r\n                    if email in diccionario_usuarios.keys():  # checamos que el email no usado por otra cuenta\r\n                        return render_template(\"agregar_usuario.html\",\r\n                                               mensaje='El email pertenece a otro usuario existente')\r\n                    else:\r\n                        diccionario_usuarios[email] = {\r\n                            'email': email,\r\n                            'password': sha256_crypt.hash(password),\r\n                            'nombre': nombre,\r\n                            'type': type\r\n                        }\r\n                        grabar_dicc_usuarios(diccionario_usuarios)\r\n                        return redirect('/usuarios')\r\n                else:\r\n                    # Cuando quieren acceder sin los permisos o estar logeado\r\n                    return redirect(\"/\")\r\n            else:\r\n                return redirect(\"/\")\r\n        else:\r\n            return redirect(\"/\")\r\n    else:\r\n        return redirect(\"/\")\r\n\r\n\r\n@app.route(\"/mod_usuario/<usu>\", methods=['GET', 'POST'])\r\ndef mod_usuario(usu):\r\n    if 'logged_in' in session.keys():\r\n        if session['logged_in']:\r\n            if session['type'] == 'admin':  # comprobamos que tenga los permisos\r\n                if request.method == 'GET':\r\n                    if usu in diccionario_usuarios.keys():  # comprobamos que el usuario que se introdujo en el link si existe\r\n                        dicc_usuario = diccionario_usuarios[usu]\r\n                        return render_template(\"modificar_usuario.html\", dicc_usuario=dicc_usuario)\r\n                    else:\r\n                        # Cuando en la url se introduce un usuario que no existe\r\n                        return redirect(\"/\")\r\n\r\n                elif request.method == 'POST':\r\n                    email = diccionario_usuarios[usu]['email']  # el email no puede cambiar\r\n                    password = request.form['password']\r\n                    nombre = request.form['nombre']\r\n                    type = request.form['tipo']\r\n\r\n                    if password == '':  # si se deja vacio el campo de la contraseña, esta se queda igual\r\n                        password = diccionario_usuarios[usu]['password']\r\n                    else:\r\n                        password = sha256_crypt.hash(password)\r\n                    diccionario_usuarios[email] = {\r\n                        'email': email,\r\n                        'password': password,\r\n                        'nombre': nombre,\r\n                        'type': type\r\n                    }\r\n                    grabar_dicc_usuarios(diccionario_usuarios)\r\n                    return redirect('/usuarios')\r\n                else:\r\n                    return redirect(\"/\")\r\n            else:\r\n                return redirect(\"/\")\r\n        else:\r\n            return redirect(\"/\")\r\n    else:\r\n        return redirect(\"/\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision f8f66702bdf0a881548a2bf17726e3d176cd09c0)
+++ b/app.py	(date 1649873384134)
@@ -8,7 +8,7 @@
 
 app = Flask(__name__)
 app.secret_key = 'lwiu74dhn2SuF3j'
-diccionario_usuarios = get_dicc_usuarios()
+diccionario_usuarios = get_dicc_usuarios(get_lista_usuarios())
 
 diccionario_accesos = get_dicc_accesos()
 mensaje = 'MENSAJE DE PRUEBA'
